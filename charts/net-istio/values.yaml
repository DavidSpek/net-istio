global:
  config:
    configLoggingName: config-logging
    configObservabilityName: config-observability
    metricsDomain: knative.dev/internal/serving

kubernetesClusterDomain: cluster.local

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

controller:
  image:
    repository: gcr.io/knative-releases/knative.dev/net-istio/cmd/controller
    tag: ""
    digest: sha256:27e7beb7c62036216fc464fb2181e56b030158ad4ceb57a7de172f54b4fe43db
    pullPolicy: IfNotPresent

  extraEnv:
  - name: ENABLE_SECRET_INFORMER_FILTERING_BY_CERT_UID
    value: "false"

  podAnnotations: {}

  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault

  nodeSelector: {}

  tolerations: []

  affinity: {}

  topologySpreadConstraints: []

  resources:
    limits:
      cpu: 300m
      memory: 400Mi
    requests:
      cpu: 30m
      memory: 40Mi

webhook:
  image:
    repository: gcr.io/knative-releases/knative.dev/net-istio/cmd/webhook
    tag: ""
    digest: sha256:0cdef272e39c57971ce9977765f164dd8e3abb9395a4f60e7a4160d57dcc09f2
    pullPolicy: IfNotPresent

  extraEnv: []

  podAnnotations: {}

  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault

  resources:
    limits:
      cpu: 200m
      memory: 200Mi
    requests:
      cpu: 20m
      memory: 20Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  topologySpreadConstraints: []

  service:
    type: ClusterIP
    ports:
    - name: http-metrics
      port: 9090
      targetPort: metrics
    - name: http-profiling
      port: 8008
      targetPort: profiling
    - name: https-webhook
      port: 443
      targetPort: https-webhook

configIstio:
  configMap:
    create: true
  data:
    _example: |-
      ################################
      #                              #
      #    EXAMPLE CONFIGURATION     #
      #                              #
      ################################
      # This block is not actually functional configuration,
      # but serves to illustrate the available configuration
      # options and document them in a way that is accessible
      # to users that `kubectl edit` this config map.
      #
      # These sample configuration options may be copied out of
      # this example block and unindented to be in the data block
      # to actually change the configuration.
      # A gateway and Istio service to serve external traffic.
      # The configuration format should be
      # `gateway.{{gateway_namespace}}.{{gateway_name}}: "{{ingress_name}}.{{ingress_namespace}}.svc.cluster.local"`.
      # The {{gateway_namespace}} is optional; when it is omitted, the system will search for
      # the gateway in the serving system namespace `knative-serving`
      gateway.knative-serving.knative-ingress-gateway: "istio-ingressgateway.istio-system.svc.cluster.local"
      # A cluster local gateway to allow pods outside of the mesh to access
      # Services and Routes not exposing through an ingress.  If the users
      # do have a service mesh setup, this isn't required and can be removed.
      #
      # An example use case is when users want to use Istio without any
      # sidecar injection (like Knative's istio-ci-no-mesh.yaml).  Since every pod
      # is outside of the service mesh in that case, a cluster-local  service
      # will need to be exposed to a cluster-local gateway to be accessible.
      # The configuration format should be `local-gateway.{{local_gateway_namespace}}.
      # {{local_gateway_name}}: "{{cluster_local_gateway_name}}.
      # {{cluster_local_gateway_namespace}}.svc.cluster.local"`. The
      # {{local_gateway_namespace}} is optional; when it is omitted, the system
      # will search for the local gateway in the serving system namespace
      # `knative-serving`
      local-gateway.knative-serving.knative-local-gateway: "knative-local-gateway.istio-system.svc.cluster.local"
    gateway.{{ .Release.Namespace }}.{{ .Values.istio.ingressGateway.name }}: "istio-ingressgateway.{{ .Values.istio.namespace }}.svc.{{ .Values.kubernetesClusterDomain }}"
    local-gateway.{{ .Release.Namespace }}.{{ .Values.istio.localGateway.name }}: "{{ .Values.istio.localGateway.name }}.{{ .Values.istio.namespace }}.svc.{{ .Values.kubernetesClusterDomain }}"

istio:
  # the namespace where istio runs
  namespace: istio-system
  ingressGateway:
    create: true
    name: knative-ingress-gateway
    selector:
      istio: ingressgateway
    servers:
    - hosts:
      - '*'
      port:
        name: http
        number: 80
        protocol: HTTP
  localGateway:
    create: true
    name: knative-local-gateway
    selector:
      istio: ingressgateway
    servers:
    - hosts:
      - '*'
      port:
        name: http
        number: 8081
        protocol: HTTP
    service:
      create: true
      type: ClusterIP
      ports:
      - name: http2
        port: 80
        targetPort: 8081
